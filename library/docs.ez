let returns = function {
    args[0].addProperty("returns", args[1]);
};

let parameters = function {
    args[0].addProperty("parameters", args[1]);
};

let description = function {
    args[0].addProperty("description", args[1]);
};

let example = function {
    args[0].addProperty("example", args[1]);
};

let expectedOutput = function {
    args[0].addProperty("expectedOutput", args[1]);
};

let printPair = function {
    console.controlSequence("7m");
    console.write(args[0]);
    console.controlSequence("0m");
    console.writeLine("\n", args[1]);
};

let findObjectName = function {
    let stack = getStack();
    for (name in stack) {
        if (stack[name].getId() == args[0].getId())
            return name;
    }
    return "c";
};

let findObjectClassName = function {
    let stack = getStack();
    for (name in stack) {
        if (stack[name].classPrototype.getId() == args[0].prototype.getId())
            return name;
    }
    return "c";
};

let help = function {
    if (findObjectName(args[0]).length() != 0)
        printPair("Name:", findObjectName(args[0]));
    if (findObjectClassName(args[0]).length() != 0)
        printPair("Instance of:", findObjectClassName(args[0]));
    //if (args[0].prototype.hasOwnProperty("prototypeName"))
    //    printPair("Instance of:", args[0].prototype.prototypeName);
    if (args[0].hasOwnProperty("parameters"))
        printPair("Parameters:", args[0].parameters);
    if (args[0].hasOwnProperty("returns"))
        printPair("Return value:", args[0].returns);
    if (args[0].hasOwnProperty("description"))
        printPair("Description:", args[0].description);
    if (args[0].hasOwnProperty("example"))
        printPair("Example:", args[0].example);
    if (args[0].hasOwnProperty("expectedOutput"))
        printPair("Expected output:", args[0].expectedOutput);
    let ownPropertyNames = args[0].getOwnPropertyNames();
    
};

let testExample = function {
    if (args[0].hasOwnProperty("example") && args[0].hasOwnProperty("expectedOutput")) {
        
        if (console.getOutput(parse(args[0].example)) != args[0].expectedOutput) {
            throw "Example not passed:\n" + args[0].example;
        }
    }
    return false;
};

import("../library/docsData.ez");

let i = 0;
let stack = getStack();
let stackNames = stack.getOwnPropertyNames();

while (i < stackNames.length()) {
    let obj <- stack[stackNames[i]];
    if (!obj.hasOwnProperty("description"))
        console.controlSequence("91m");
    console.writeLine(stackNames[i]);
    console.controlSequence("0m");
    let objNames = obj.getOwnPropertyNames();
    if (obj.hasOwnProperty("prototype")) {
        let prototypeNames = obj.prototype.getOwnPropertyNames();
        objNames.insertFrom(objNames.length(), prototypeNames, 0, prototypeNames.length());
    }
    let j = 0;
    while (j < objNames.length()) {
        if (!Object.readOperator.call(obj, objNames[j]).hasOwnProperty("description"))
            console.controlSequence("91m");
        console.writeLine("\t", objNames[j]);
        console.controlSequence("0m");
        j++;
    }
    i++;
}

console.log("");
help(Array);

Class.classPrototype.name  = "Class";

class Con {
    constructor: function {
        console.log("con");
    }
}


console.log(Con.name);
let arr = Array[1,2,3];
for(a of arr) {
    console.writeLine(a);
}

let obj = json{
    a:1,
    b:"b",
    c:3
};
for(a in obj) {
    console.writeLine(a);
}
//console.log(transpile(File().open("testBasic2.ez").readTo("\000")));