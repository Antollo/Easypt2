...import("algorithm");
...import("docsData.ez");

function printPair(a, b) {
    console.controlSequence("7m").write(a).controlSequence("0m").writeLine("\n", b);
};

function findObjectName(obj) {
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++) {
        if (stack[names[i]].getId() == obj.getId())
            return names[i];
    }
    return "<unknown>";
};

function findObjectClassName(obj) {
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++) {
        if (obj instanceOf stack[names[i]])
            return names[i];
    }
    return "<unknown>";
};

function findObjectClassNameByClassPrototype(obj) {
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++) {
        if (obj.getId() == stack[names[i]].classPrototype.getId())
            return names[i];
    }
    return "<unknown>";
};

function listProperties(obj) {
    let list = "";
    let names <- sort(obj.getOwnPropertyNames());
    for (let i = 0; i < names.length(); i++) {
        if (names[i].search("returns|parameters|description|example|expectedOutput|prototype|__").length() == 0) {
            list.append(names[i]);
            list.append("\n");
        }
    }
    if (list.length())
        list.erase(list.length() - 1, 1);
    return list;
};

function help(obj) {
    if (findObjectName(obj).length() != 0)
        printPair("Name:", findObjectName(obj));
    if (findObjectClassName(obj).length() != 0)
        printPair("Instance of:", findObjectClassName(obj));
    if (obj instanceOf Class)
        printPair("Inherits from: ", findObjectClassNameByClassPrototype(obj.classPrototype.prototype));
    if (obj.hasOwnProperty("parameters"))
        printPair("Parameters:", obj.parameters);
    if (obj.hasOwnProperty("returns"))
        printPair("Return value:", obj.returns);
    else
        if (obj instanceOf Function)
            printPair("Return value:", "this");
    if (obj.hasOwnProperty("description"))
        printPair("Description:", obj.description);
    if (obj.hasOwnProperty("example"))
        printPair("Example:", obj.example);
    if (obj.hasOwnProperty("expectedOutput"))
        printPair("Expected output:", obj.expectedOutput);
    if (obj instanceOf Class) {
        printPair("Members:", listProperties(obj.classPrototype));
        printPair("Inherited members:", listProperties(obj.classPrototype.prototype));
    }
    let properties <- listProperties(obj);
    if (properties.length())
        printPair("Properties:", properties);
};

function testExample(obj, name) {
    if (obj.hasOwnProperty("example") && obj.hasOwnProperty("expectedOutput")
        && obj.example instanceOf String && obj.expectedOutput instanceOf String) {
        try {
            let output;
            try {
                output <- console.getOutput(parse(obj.example));  
            } catch {
                output <- exception;
            } 
            if (obj.expectedOutput == output) {
                console.ok("Example passed: ", name);
                return true;
            }
            console.error("Example not passed: ", name, "\n", output);
        } catch {
            console.error("Error in: ", name, " ", exception);
        }
        return false;
    }
    return true;
};

function recursiveTestExample(obj, name) {
    let ok = testExample(obj, name);
    let names <- obj.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++)
        if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
            ok = ok && recursiveTestExample(Object.readOperator.call(obj, names[i]), name + "." + names[i]);
    return ok;
};

function testAllExamples() {
    let ok = true;
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++)
        if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
            ok = ok && recursiveTestExample(Object.readOperator.call(stack, names[i]), names[i]);
    if (ok) 
        console.ok("All examples have passed")
    else
        console.error("Not all examples have passed")
    return ok;
};

let prefix = "docs/";

function toFilename(filename) {
    let result = "/built-ins/" + filename + (filename.split(".").length() > 1 ? "/index" : "");
    return "{{site.baseurl}}" + result.replaceAll(".", "\\", true).replaceAll("/", "\\", true);
};

function mdCodeLink(name, link) {
    if (name.search("prototype|classPrototype").length() == 0)
        return "[" + name + "](" + toFilename(link) + ")";
    else
        return name;
};

function mdListProperties(obj, name) {
    let list = "";
    let names <- sort(obj.getOwnPropertyNames());
    for (let i = 0; i < names.length(); i++) {
        if (names[i].search("returns|parameters|description|example|expectedOutput|prototype|__").length() == 0) {
            if (Object.classPrototype.readOperator.call(obj, names[i]).hasOwnProperty("description"))
                list.append("- " + mdCodeLink("`" + names[i] + "`", name + "." + names[i]));
            else
                list.append("- `" + names[i] + "`");
            list.append("\n");
        }
    }
    return list;
};

function doc(obj, name) {
    let file <- File();

    let filename = prefix + name;
    filename.replaceAll(".", "\\", true).replaceAll("/", "\\", true);
    let path = filename;

    filename = path + (name.split(".").length() > 1 ? "\\index" : "");
    let mkdir = ChildProcess("cmd", ["/C mkdir " + path]);
    console.warn(mkdir.stderr.readLine());

    /*if ((let splitted = filename.split("\\"))[-3] == "classPrototype")
    {
        splitted.erase(splitted.length() - 2, 1);
        splitted = splitted.join("\\");
        let file <- File();
        file.create(splitted + ".md");
        file.write("# Members\n{% include list.liquid all=true %}\n");
        console.error(splitted);
    }*/

    console.debug(path)
    console.debug(filename + ".md")

    file.create(filename + ".md");
    console.ok(name);
    file.writeLine("# ", name, "\n");
    let className = findObjectClassName(obj);
    file.writeLine("<dl>");
    file.writeLine("<dt> Instance of </dt><dd markdown=\"1\">\n ", mdCodeLink("`" + className + "`", className), " \n</dd>");
    let baseClassName;
    if (obj instanceOf Class) {
        baseClassName = findObjectClassNameByClassPrototype(obj.classPrototype.prototype);
        file.writeLine("<dt> Inherits from </dt><dd markdown=\"1\">\n ", mdCodeLink("`" + baseClassName + "`", baseClassName), " \n</dd>");
    }
    if (obj.hasOwnProperty("parameters"))
        file.writeLine("<dt> Parameters </dt><dd markdown=\"1\">\n `", obj.parameters, "` \n</dd>");
    if (obj.hasOwnProperty("returns"))
        file.writeLine("<dt> Return value </dt><dd markdown=\"1\">\n `", obj.returns, "` \n</dd>");
    else
        if (obj instanceOf Function)
            file.writeLine("<dt> Return value </dt><dd markdown=\"1\">\n `this` \n</dd>\n");
    file.writeLine("</dl>\n");
    if (obj.hasOwnProperty("description"))
        file.writeLine("### Description\n\n", obj.description, "\n");
    if (obj.hasOwnProperty("example"))
        file.writeLine("### Example\n\n```js\n", obj.example, "\n```\n");
    if (obj.hasOwnProperty("expectedOutput"))
        file.writeLine("**Expected output**\n\n```\n", obj.expectedOutput, "\n```\n");
    if (obj instanceOf Class) {
        file.writeLine("### Members\n\n", mdListProperties(obj.classPrototype, name + ".classPrototype"), "\n");
        file.writeLine("### Inherited members\n\n", mdListProperties(obj.classPrototype.prototype, baseClassName + ".classPrototype"), "\n");
    }
    let properties <- mdListProperties(obj, name);
    if (properties.length() && name != "modules")
        file.writeLine("### Properties\n\n", properties, "\n");
    if (obj.hasOwnProperty("description") && obj.description.hasOwnProperty("note"))
        file.writeLine(obj.description.note, "\n");
    file.close();
};

function recursiveDoc(obj, name) {
    if (obj.hasOwnProperty("description") && obj.description instanceOf String && name != "this") {
        doc(obj, name);
        let names <- obj.getOwnPropertyNames();
        for (let i = 0; i < names.length(); i++) {
            if (names[i] != "prototype" && names[i].substring(0, 2) != "__" && name != "modules")
                recursiveDoc(Object.readOperator.call(obj, names[i]), name + "." + names[i]);
        }
        
        if (obj.hasOwnProperty("classPrototype")) {
            names <- obj.classPrototype.getOwnPropertyNames();
            for (let i = 0; i < names.length(); i++)
                if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
                    recursiveDoc(Object.readOperator.call(obj.classPrototype, names[i]), name + ".classPrototype." + names[i]);
        }
        
        return true;
    }
    else {
        if (name.search("classPrototype$").length() == 0 && name.search("returns|parameters|description|example|expectedOutput|prototype").length() == 0)
            console.warn(name);
    }
    return false;
};

function makeDocs() {
    addDocToModuleObject(module);

    let index <- File();
    prefix = args.length() > 0 ? args[0] : "docs/";
    index.create(prefix + "index.md");
    prefix = prefix + "built-ins/"; 
    let builtInsIndex <- File();
    builtInsIndex.create(prefix + "index.md");
    index.writeLine("# Easypt reference\n");
    index.writeLine("## Language");
    index.writeLine("- [Grammar](grammar.md)");
    index.writeLine("- [Expressions reference](expressions.md)");
    index.writeLine("- [Statements reference](statements.md)");
    index.writeLine("- [Type conversion](type_conversion.md)");
    index.writeLine("\n## Built-in objects functions and classes");
    builtInsIndex.writeLine("## Built-ins\n");

    let stack <- getStack();
    let names <- sort(stack.getOwnPropertyNames());
    for (let i = 0; i < names.length(); i++)
        if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
        {
            if (recursiveDoc(Object.readOperator.call(stack, names[i]), names[i]))
            {
                let line <- "- " + mdCodeLink("`" + names[i] + "`", names[i]);
                index.writeLine(line);
                builtInsIndex.writeLine(line);
            }
        }
    index.writeLine("\n");
    builtInsIndex.writeLine("\n");
};

return {
    help: help,
    makeDocs: makeDocs,
    testAllExamples: testAllExamples
};