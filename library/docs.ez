...import("algorithm");

function returns(obj, value) {
    obj.addProperty("returns", value);
};

function parameters(obj, value) {
    obj.addProperty("parameters", value);
};

function description(obj, value) {
    obj.addProperty("description", value);
};

function example(obj, value) {
    obj.addProperty("example", value);
};

function expectedOutput(obj, value) {
    obj.addProperty("expectedOutput", value);
};

function printPair(a, b) {
    console.controlSequence("7m").write(a).controlSequence("0m").writeLine("\n", b);
};

function findObjectName() {
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++) {
        if (stack[names[i]].getId() == args[0].getId())
            return names[i];
    }
    return "<unknown>";
};

function findObjectClassName {
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++) {
        if (args[0] instanceOf stack[names[i]])
            return names[i];
    }
    return "<unknown>";
};

function findObjectClassNameByClassPrototype {
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++) {
        if (args[0].getId() == stack[names[i]].classPrototype.getId())
            return names[i];
    }
    return "<unknown>";
};

function listProperties {
    let list = "";
    sort(args[0].getOwnPropertyNames()).forEach(function {
        if (args[0].search("returns|parameters|description|example|expectedOutput|prototype|__").length() == 0) {
            list.append(args[0]);
            list.append("\n");
        }
    });
    if (list.length())
        list.erase(list.length() - 1, 1);
    return list;
};

function help {
    if (findObjectName(args[0]).length() != 0)
        printPair("Name:", findObjectName(args[0]));
    if (findObjectClassName(args[0]).length() != 0)
        printPair("Instance of:", findObjectClassName(args[0]));
    if (args[0] instanceOf Class)
        printPair("Inherits from: ", findObjectClassNameByClassPrototype(args[0].classPrototype.prototype));
    if (args[0].hasOwnProperty("parameters"))
        printPair("Parameters:", args[0].parameters);
    if (args[0].hasOwnProperty("returns"))
        printPair("Return value:", args[0].returns);
    else
        if (args[0] instanceOf Function)
            printPair("Return value:", "this");
    if (args[0].hasOwnProperty("description"))
        printPair("Description:", args[0].description);
    if (args[0].hasOwnProperty("example"))
        printPair("Example:", args[0].example);
    if (args[0].hasOwnProperty("expectedOutput"))
        printPair("Expected output:", args[0].expectedOutput);
    if (args[0] instanceOf Class) {
        printPair("Members:", listProperties(args[0].classPrototype));
        printPair("Inherited members:", listProperties(args[0].classPrototype.prototype));
    }
    let properties <- listProperties(args[0]);
    if (properties.length())
        printPair("Properties:", properties);
};

function testExample (object, name) {
    if (object.hasOwnProperty("example") && object.hasOwnProperty("expectedOutput")
        && object.example instanceOf String && object.expectedOutput instanceOf String) {
        try {
            let output;
            try {
                output <- console.getOutput(parse(object.example));  
            } catch {
                output <- exception;
            } 
            if (object.expectedOutput == output) {
                console.debug("Example passed: ", name);
                return true;
            }
            console.error("Example not passed: ", name, "\n", output);
        } catch {
            console.error("Error in: ", name, " ", exception);
        }
        return false;
    }
    return true;
};

function recursiveTestExample (object, name) {
    let ok = testExample(object, name);
    let names <- object.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++)
        if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
            ok = ok && recursiveTestExample(Object.readOperator.call(object, names[i]), name + "." + names[i]);
    return ok;
};

function testAllExamples {
    let ok = true;
    let stack <- getStack();
    let names <- stack.getOwnPropertyNames();
    for (let i = 0; i < names.length(); i++)
        if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
            ok = ok && recursiveTestExample(Object.readOperator.call(stack, names[i]), names[i]);
    return ok;
};

let prefix = "docs/";

function mdCodeLink (name, link) {
    if (args[0].search("prototype|classPrototype").length() == 0)
        return "[`" + name + "`](" + link + ".md)";
    else
        return "`" + name + "`";
};

function mdListProperties (object, name) {
    let list = "";
    sort(object.getOwnPropertyNames()).forEach(function {
        if (args[0].search("returns|parameters|description|example|expectedOutput|prototype|__").length() == 0) {
            if (Object.classPrototype.readOperator.call(object, args[0]).hasOwnProperty("description"))
                list.append("- " + mdCodeLink(args[0], name + "." + args[0]));
            else
                list.append("- `" + args[0] + "`");
            list.append("\n");
        }
    });
    return list;
};

function doc {
    let file <- File();
    file.create(prefix + args[1] + ".md");
    file.writeLine("## Name: `", args[1], "`\n");
    let className = findObjectClassName(args[0]);
    file.writeLine("#### Instance of: ", mdCodeLink(className, className), "\n");
    let baseClassName;
    if (args[0] instanceOf Class) {
        baseClassName = findObjectClassNameByClassPrototype(args[0].classPrototype.prototype);
        file.writeLine("#### Inherits from: ", mdCodeLink(baseClassName, baseClassName), "\n");
    }
    if (args[0].hasOwnProperty("parameters"))
        file.writeLine("#### Parameters: `", args[0].parameters, "`\n");
    if (args[0].hasOwnProperty("returns"))
        file.writeLine("#### Return value: `", args[0].returns, "`\n");
    else
        if (args[0] instanceOf Function)
            file.writeLine("#### Return value: `this`\n");
    if (args[0].hasOwnProperty("description"))
        file.writeLine("### Description:\n\n", args[0].description, "\n");
    if (args[0].hasOwnProperty("example"))
        file.writeLine("#### Example:\n\n```js\n", args[0].example, "\n```\n");
    if (args[0].hasOwnProperty("expectedOutput"))
        file.writeLine("##### Expected output:\n\n```\n", args[0].expectedOutput, "\n```\n");
    if (args[0] instanceOf Class) {
        file.writeLine("#### Members:\n\n", mdListProperties(args[0].classPrototype, args[1] + ".classPrototype"), "\n");
        file.writeLine("#### Inherited members:\n\n", mdListProperties(args[0].classPrototype.prototype, baseClassName + ".classPrototype"), "\n");
    }
    let properties <- mdListProperties(args[0], args[1]);
    if (properties.length())
        file.writeLine("### Properties:\n\n", properties, "\n");
    file.close();
};

function recursiveDoc {
    if (args[0].hasOwnProperty("description") && args[0].description instanceOf String) {
        doc(args[0], args[1]);
        let names <- args[0].getOwnPropertyNames();
        for (let i = 0; i < names.length(); i++) {
            if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
                recursiveDoc(Object.readOperator.call(args[0], names[i]), args[1] + "." + names[i]);
        }
        
        if (args[0].hasOwnProperty("classPrototype")) {
            names <- args[0].classPrototype.getOwnPropertyNames();
            for (let i = 0; i < names.length(); i++)
                if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
                    recursiveDoc(Object.readOperator.call(args[0].classPrototype, names[i]), args[1] + ".classPrototype." + names[i]);
        }
        
        return true;
    }
    else {
        if (args[1].search("classPrototype$").length() == 0 && args[1].search("returns|parameters|description|example|expectedOutput|prototype").length() == 0)
            console.warn(args[1]);
    }
    return false;
};

function makeDocs(path) {
    let file <- File();
    prefix = args.length() > 0 ? path : "docs/";
    file.create(prefix + "index.md");
    file.writeLine("# Easypt reference\n");
    file.writeLine("## Language\n");
    file.writeLine("- [Grammar](grammar.md).\n");
    file.writeLine("- [Expressions reference](expressions.md).\n");
    file.writeLine("- [Statements reference](statements.md).\n");
    file.writeLine("- [Type conversion](type_conversion.md).\n");
    file.writeLine("## Built-in objects functions and classes\n");

    file.writeLine("- " + mdCodeLink("module", "module"));

    let stack <- getStack();
    let names <- sort(stack.getOwnPropertyNames());
    for (let i = 0; i < names.length(); i++)
        if (names[i] != "prototype" && names[i].substring(0, 2) != "__")
        {
            if (recursiveDoc(Object.readOperator.call(stack, names[i]), names[i]))
                file.writeLine("- " + mdCodeLink(names[i], names[i]));
        }
    file.writeLine("\n");
};

import("docsData.ez");

return {
    help: help,
    makeDocs: makeDocs,
    testAllExamples: testAllExamples
};