argc @description@
"Number of the interpreter's command-line arguments.";
argc @example@
"// easypt -file f.ez
// f.ez:
for (let i = 0; i < argc; i++)
    console.writeLine(argv[i]);";

argv @description@
"Array of the interpreter's command-line arguments.";
argv @example@
"// easypt -file f.ez
// f.ez:
for (let i = 0; i < argc; i++)
    console.writeLine(argv[i]);";

import @parameters@
"file /*String or File*/";
import @returns@
"/*Object*/";
import @description@
"Imports source code (module) from another *.ez file (source code is parsed and 
executed, return value is returned as import return value). First and only 
parameter is filename or opened `File` object. Files are searched in directories 
listed in `import.getImportPaths()`. Imported modules are cached in `modules`.";
import @example@
"let file = File();
file.create(\"maths.ez\");
file.write(\"return { multiply: (a, b) => a * b; };\");
file.close();
let importedModule = import(\"maths.ez\");
/* A new cache entry has been inserted into the modules:
{
    \"maths\": {
        \"name\": \"maths\",
        \"filename\": \"maths.ez\",
        \"path\": \"C:\\Easypt\\library\",
        \"exports\": {
            \"multiply\": <function>
        }
    },
    ...
}*/
file.remove();
console.write(importedModule.multiply(4, 6), \" \");
console.write(modules.maths.name, \" \");
console.write(modules.maths.filename, \" \");
console.write(modules.maths.exports.multiply instanceOf Function);";
import @expectedOutput@ "24 maths maths.ez true";

import.getImportPaths @returns@
"/*Array*/";
import.getImportPaths @description@
"Returns list of directories in which `import`
searches for files.";
import.getImportPaths @example@
"let importPaths = import.getImportPaths();
let l = importPaths.length();
let interpreterExecutableParentPath = importPaths[l - 1];
let interpreterExecutablePath = importPaths[l - 2];
let currentPathFromInterpreterLaunch = importPaths[l - 3];
console.write(interpreterExecutablePath.indexOf(interpreterExecutableParentPath));";
import.getImportPaths @expectedOutput@ "0";

parse @parameters@
"code /*String*/";
parse @returns@
"/*Function*/";
parse @description@
"Parses code from string to `Function` object. It is dangerous
(it could parse malicious code) function.";
parse @example@
"let fun = parse(\"
    let x = 7;
    let y = 3;
    return x*y + y;\");
let result = fun();
console.write(result);";
parse @expectedOutput@ "24";

execute @parameters@
"code /*String*/";
execute @returns@
"/*Object*/";
execute @description@
"Parses code from string and executes it (using current stack - variable declared in
string is accessible outside the execute function). It is dangerous (it could execute
malicious code) function.";
execute @example@
"let result = execute(\"
    let x = 7;
    let y = 3;
    let z = x*y + y;
    return z; 
\");
console.write(result, \" \", z);";
execute @expectedOutput@ "24 24";

console @description@
"`console` object provides standard input and output operations.";
console @example@
"console.write(\"1+3 is \", 1+3);
if (1+3 != 4) {
    console.warn(\"1+3 is not 4!\");
}";
console @expectedOutput@
"1+3 is 4";

console.newLine @description@
"Writes the new line character or characters sequence
(platform dependent) to standard output stream.";
console.newLine @returns@
"console";
console.newLine @example@
"console.newLine();";

console.write @parameters@
"/*any number of convertible to String parameters*/";
console.write @returns@
"console";
console.write @description@
"Writes arguments to standard output stream.";
console.write @example@
"console.write(\"seven: \", 7);";
console.write @expectedOutput@ "seven: 7";

console.writeAsync @parameters@
"/*any number of convertible to String parameters*/";
console.writeAsync @returns@
"/*Promise*/";
console.writeAsync @description@
"Writes arguments to standard output stream.";
console.writeAsync @example@
"await console.writeAsync(\"seven: \", 7);";
console.writeAsync @expectedOutput@ "seven: 7";

console.writeLine @parameters@
"/*any number of convertible to String parameters*/";
console.writeLine @returns@
"console";
console.writeLine @description@
"Writes arguments appended with the new line character or 
characters sequence (platform dependent) to standard 
output stream.";
console.writeLine @example@
"console.writeLine(\"seven: \", 7);";
console.writeLine @expectedOutput@ "seven: 7\n";

console.writeLineAsync @parameters@
"/*any number of convertible to String parameters*/";
console.writeLineAsync @returns@
"/*Promise*/";
console.writeLineAsync @description@
"Writes arguments appended with the new line character or 
characters sequence (platform dependent) to standard 
output stream.";
console.writeLineAsync @example@
"await console.writeLineAsync(\"seven: \", 7);";
console.writeLineAsync @expectedOutput@ "seven: 7\n";

console.debug @parameters@
"/*any number of convertible to String parameters*/";
console.debug @returns@
"console";
console.debug @description@
"Writes arguments to standard output stream
(with date and time, marked in violet).";
console.debug @example@
"let a = 7;
console.debug(\"value of a : \", a);";

console.log @parameters@
"/*any number of convertible to String parameters*/";
console.log @returns@
"console";
console.log @description@
"Writes arguments to standard output stream
(with date and time, marked in blue).";
console.log @example@
"let a = 7;
console.log(\"value of a : \", a);";

console.warn @parameters@
"/*any number of convertible to String parameters*/";
console.warn @returns@
"console";
console.warn @description@
"Writes arguments to standard output stream
(with date and time, marked in yellow).";
console.warn @example@
"let input = console.read();
if (a != 7)
    console.warn(\"value of input is not 7\");";

console.error @parameters@
"/*any number of convertible to String parameters*/";
console.error @returns@
"console";
console.error @description@
"Writes arguments to standard output stream
(with date and time, marked in yellow).";
console.error @example@
"try {
    throw \"error\";
} catch {
    console.error(exception);
}";

console.read @returns@
"/*String*/";
console.read @description@
"Reads word terminated by whitespace from standard input stream.";
console.read @example@
"console.writeLine(\"What is your name?\");
let name = console.read();
console.writeLine(\"Welcome \", name);";

console.readAsync @returns@
"/*Promise of String*/";
console.readAsync @description@
"Reads word terminated by whitespace from standard input stream.";
console.readAsync @example@
"console.writeLine(\"What is your name?\");
let name = await console.readAsync();
console.writeLine(\"Welcome \", name);";

console.readLine @returns@
"/*String*/";
console.readLine @description@
"Reads string terminated by new line character 
from standard input stream.";
console.readLine @example@
"console.writeLine(\"Who is your favourite writer?\");
let writer = console.readLine();
console.writeLine(\"I like books written by \", writer, \" too.\");";

console.readLineAsync @returns@
"/*Promise of String*/";
console.readLineAsync @description@
"Reads string terminated by new line character 
from standard input stream.";
console.readLineAsync @example@
"console.writeLine(\"Who is your favourite writer?\");
let writer = await console.readLineAsync();
console.writeLine(\"I like books written by \", writer, \" too.\");";

console.controlSequence @parameters@
"/*String*/";
console.controlSequence @returns@
"console";
console.controlSequence @description@
"Writes ANSI escape code starting with `ESC` and `[` 
(CSI sequence) to the standard output stream.";
console.controlSequence @example@
"console.controlSequence(\"7m\").write(\"special\").controlSequence(\"0m\");";

console.getOutput @parameters@
"/*Function*/, [...]";
console.getOutput @returns@
"/*String*/";
console.getOutput @description@
"Calls provided function (forwards arguments) and intercept 
output written by that function. Useful for testing.";
console.getOutput @example@
"function f (a) {
    console.write(a);
};
let output = console.getOutput(f, \"abc\");
console.write(output);";
console.getOutput @expectedOutput@
"abc";

console.setInput @parameters@
"/*String*/, /*Function*/, [...]";
console.setInput @returns@
"console";
console.setInput @description@
"Calls provided function (forwards arguments) and pass the 
string as input to this function. Useful for testing.";
console.setInput @example@
"console.setInput(\"abc\", () => {
    let input = console.read();
    console.write(input);
});";
console.setInput @expectedOutput@
"abc";

Array @description@
"Array lists provides methods for manipulating arrays (list-like
objects). Array elements are indexed with non-negative integers.";
Array @example@
"let arr = [36.6, \"Harry\", true];
arr.forEach(function {
    console.write(args[0], \" is element with index \", args[1], \", \");
});";
Array @expectedOutput@
"36.600000 is element with index 0, Harry is element with index 1, true is element with index 2, ";

Array.classPrototype.forEach @parameters@
"callback /*Function*/";
Array.classPrototype.forEach @description@
"Executes a callback for each array element. Arguments of callback are:
element, index of element, array.";
Array.classPrototype.forEach @example@
"let arr = [36.6, \"Harry\", true];
arr.forEach(function {
    console.write(args[0], \" is element with index \", args[1], \", \");
});";
Array.classPrototype.forEach @expectedOutput@
"36.600000 is element with index 0, Harry is element with index 1, true is element with index 2, ";

Array.classPrototype.length @returns@
"/*Number*/";
Array.classPrototype.length @description@
"Returns the number of elements in that array.";
Array.classPrototype.length @example@
"let arr = [36.6, \"Harry\", true];
console.write(arr.length());";
Array.classPrototype.length @expectedOutput@ "3";

Array.classPrototype.insert @parameters@
"n /*Number*/, element";
Array.classPrototype.insert @description@
"Inserts new element before n-th element.";
Array.classPrototype.insert @example@
"let arr = [36.6, \"Harry\", true];
arr.insert(1, \"Dirty \");
console.write(arr[1], arr[2]);";
Array.classPrototype.insert @expectedOutput@
"Dirty Harry";

Array.classPrototype.insertFrom @parameters@
"n /*Number*/, array /*Array*/, [position = 0 /*Number*/], [length = array.length() /*Number*/]";
Array.classPrototype.insertFrom @description@
"Inserts to array new elements before n-th element from subarray of second
argument starting at given position and of given length.";
Array.classPrototype.insertFrom @example@
"let arr = [36.6, \"Harry\", true];
arr.insertFrom(3, [1, 2, 3, 4, 5, 6], 2, 4);
console.write(arr[3], arr[4], arr[5], arr[6]);";
Array.classPrototype.insertFrom @expectedOutput@
"3456";

Array.classPrototype.erase @parameters@
"position /*Number*/, [length = array.length() /*Number*/]";
Array.classPrototype.erase @description@
"Erases elements from range [position, position + length).";
Array.classPrototype.erase @example@
"let arr = [1, 2, 3];
arr.erase(1, 1);
console.write(arr[0], arr[1]);";
Array.classPrototype.erase @expectedOutput@
"13";

Array.classPrototype.subarray @parameters@
"position /*Number*/, [length = array.length() /*Number*/]";
Array.classPrototype.subarray @returns@
"/*Array*/";
Array.classPrototype.subarray @description@
"Creates subarray of given length starting at given position.";
Array.classPrototype.subarray @example@
"let arr = [1, 2, 3];
let subarr = arr.subarray(1, 1);
console.write(subarr[0]);";
Array.classPrototype.subarray @expectedOutput@
"2";

Array.classPrototype.readOperator @parameters@
"position /*Number*/";
Array.classPrototype.readOperator @returns@
"/*Object*/";
Array.classPrototype.readOperator @description@
"Read operator (arrayInstance[n]) returns element at given position.
Not to be confused with static method Array.readOperator.";
Array.classPrototype.readOperator @example@
"let arr = [36.6, \"Harry\", true];
console.write(arr[1]);";
Array.classPrototype.readOperator @expectedOutput@
"Harry";

Array.readOperator @parameters@
"...";
Array.readOperator @returns@
"/*Array*/";
Array.readOperator @description@
"Static read operator ([1, \"A\"]) constructs new Array.
Not to be confused with method Array.classPrototype.readOperator.";
Array.readOperator @example@
"let arr = [36.6, \"Harry\", true];
console.write(arr[1]);";
Array.readOperator @expectedOutput@
"Harry";

Object @description@
"Base class of all Easypt classes, all objects
are instances of Object.";
Object @example@
"let obj; // Object is default type
obj.addProperty(\"first\", 1);
obj.addProperty(\"second\", \"a\");
obj.removeProperty(\"second\");
if (obj.hasOwnProperty(\"second\"))
    console.write(obj.second);
else
    console.write(obj.first);";
Object @expectedOutput@
"1";

Object.classPrototype.getId @returns@
"/*String*/";
Object.classPrototype.getId @description@
"Returns array of bytes unique for each Object instance.
It can be equal to the id of the destructed object.";
Object.classPrototype.getId @example@
"console.writeLine(1.getId());
console.writeLine(\"ABC\".getId());
console.writeLine(Object().getId());";

Object.classPrototype.addProperty @parameters@
"key /*String*/, value /*Object*/";
Object.classPrototype.addProperty @returns@
"key /*String*/";
Object.classPrototype.addProperty @description@
"Adds new property to object.";
Object.classPrototype.addProperty @example@
"let obj;
obj.addProperty(\"first\", 1);
obj.addProperty(\"second\", \"a\");
console.write(obj.first, \" \", obj.second);";
Object.classPrototype.addProperty @expectedOutput@
"1 a";

Object.classPrototype.removeProperty @parameters@
"key /*String*/, value";
Object.classPrototype.removeProperty @description@
"Adds new property to object.";
Object.classPrototype.removeProperty @example@
"let obj;
obj.addProperty(\"first\", 1);
obj.addProperty(\"second\", \"a\");
obj.removeProperty(\"second\");
if (obj.hasOwnProperty(\"second\"))
    console.write(obj.second);
else
    console.write(obj.first);";
Object.classPrototype.removeProperty @expectedOutput@
"1";

Object.classPrototype.hasOwnProperty @parameters@
"key /*String*/";
Object.classPrototype.hasOwnProperty @returns@
"/*Boolean*/";
Object.classPrototype.hasOwnProperty @description@
"Checks whether the object has own property.";
Object.classPrototype.hasOwnProperty @example@
"let obj;
obj.addProperty(\"first\", 1);
console.write(obj.hasOwnProperty(\"first\"), \" \", obj.hasOwnProperty(\"second\"));";
Object.classPrototype.hasOwnProperty @expectedOutput@
"true false";

Object.classPrototype.getOwnPropertyNames @returns@
"/*Array*/";
Object.classPrototype.getOwnPropertyNames @description@
"Returns array of all own properties. Order is not specified.
Possible output for following example is:
\"secondNumber prototype number thirdNumber\"";
Object.classPrototype.getOwnPropertyNames @example@
"let obj;
obj.number = 21;
obj[\"secondNumber\"] = 22;
obj.addProperty(\"thirdNumber\", 1);
obj.getOwnPropertyNames().forEach(function {
    console.write(args[0], \" \");
});";

Object.classPrototype.readOperator @parameters@
"key /*String*/";
Object.classPrototype.readOperator @description@
"Read operator (string[key]) returns property.";
Object.classPrototype.readOperator @example@
"let obj;
obj.number = 21;
obj[\"secondNumber\"] = 22;
console.write(obj[\"number\"], \" \", obj.secondNumber);";
Object.classPrototype.readOperator @expectedOutput@
"21 22";

Object.classPrototype.toNumber @returns@
"/*Number*/";
Object.classPrototype.toNumber @description@
"Converts object to number:
- from `String` (parses the string as number)
- from `Array` (returns length of the array)
- from `Boolean` (returns 1 if true and 0 otherwise)
- from other types (if not default `toNumber` method 
  exists, calls it, otherwise returns the number of 
  properties not including prototype property)";
Object.classPrototype.toNumber @example@
"console.write(\"12.1e1\".toNumber(), \" \", false.toNumber());";
Object.classPrototype.toNumber @expectedOutput@
"121 0";

Object.classPrototype.toString @returns@
"/*String*/";
Object.classPrototype.toString @description@
"Converts object to number:
- from `Number` (serializes the number to string)
- from `Array` (serializes the array to string)
- from `Boolean` (serializes the boolean to string)
- from other types (if not default `toString` method 
  exists, calls it, otherwise serializes the object 
  to JSON)";
Object.classPrototype.toString @example@
"console.write(12.1e1.toString(), \"\n\", { x: 1 }.toString());";
Object.classPrototype.toString @expectedOutput@
"121
{
    \"x\": 1
}";

Object.classPrototype.toArray @returns@
"/*Array*/";
Object.classPrototype.toArray @description@
"Converts object to number:
- from `Number` (creates one element array containing 
  this object)
- from `String` (creates one element array containing 
  this object)
- from `Boolean` (creates one element array containing 
  this object)
- from other types (if not default `toArray` method 
  exists, calls it, otherwise creates one element array 
  containing this object)";
Object.classPrototype.toArray @example@
"console.write(\"abc\".toArray(), \" \", true.toArray());";
Object.classPrototype.toArray @expectedOutput@
"[\"abc\"] [true]";

Object.classPrototype.toBoolean @returns@
"/*Boolean*/";
Object.classPrototype.toBoolean @description@
"Converts object to number:
- from `Number` (returns false if number is equal to 
  0 and true otherwise)
- from `String` (returns false if string is empty and 
  true otherwise)
- from `Array` (returns false if array is empty and 
  true otherwise)
- from other types (if not default `toBoolean` method 
  exists, calls it, otherwise returns false if the number 
  of properties not including prototype property is 
  equal to 0 and true otherwise)";
Object.classPrototype.toBoolean @example@
"console.write([].toBoolean(), \" \", 10.toBoolean());";
Object.classPrototype.toBoolean @expectedOutput@
"false true";

module @description@
"Object containing information about current source file.";
module @example@
"console.writeLine(module.name);";

module.name @description@
"Path of current source file.";
module.name @example@
"console.writeLine(module.name);";

String @description@
"Represents text as a sequence of characters (UTF-8 code units).
Provides methods for manipulating such sequences. Strings 
are indexed with non-negative integers.";
String @example@
"console.write(\"a\".getByteAt(0));";
String @expectedOutput@
"97";

String.classPrototype.length @returns@
"/*Number*/";
String.classPrototype.length @description@
"Returns the number of bytes in string.";
String.classPrototype.length @example@
"console.write(\"abc\".length());";
String.classPrototype.length @expectedOutput@ "3";

String.classPrototype.insertFrom @parameters@
"n /*Number*/, string /*String*/, [position = 0 /*Number*/], [length = string.length() /*Number*/]";
String.classPrototype.insertFrom @description@
"Inserts bytes to string before n-th byte from substring of second
argument starting at given position and of given length.";
String.classPrototype.insertFrom @example@
"let x = \"xyz\";
x.insertFrom(1, \"abc\", 1, 2);
console.write(x);";
String.classPrototype.insertFrom @expectedOutput@
"xbcyz";

String.classPrototype.erase @parameters@
"position /*Number*/, [length = string.length() /*Number*/]";
String.classPrototype.erase @description@
"Erases bytes from range [position, position + length).";
String.classPrototype.erase @example@
"let str = \"abcdefg\";
str.erase(2, 3);
console.write(str);";
String.classPrototype.erase @expectedOutput@
"abfg";

String.classPrototype.substring @parameters@
"position /*Number*/, [length = string.length() /*Number*/]";
String.classPrototype.substring @returns@
"/*String*/";
String.classPrototype.substring @description@
"Creates substring of given length starting at given position.";
String.classPrototype.substring @example@
"console.write(\"abcde\".substring(1, 2));";
String.classPrototype.substring @expectedOutput@
"bc";

String.classPrototype.readOperator @parameters@
"position /*Number*/";
String.classPrototype.readOperator @returns@
"/*String*/";
String.classPrototype.readOperator @description@
"Read operator (stringInstance[n]) returns character at given position.";
String.classPrototype.readOperator @example@
"console.write(\"Harry\"[1]);";
String.classPrototype.readOperator @expectedOutput@
"a";

String.classPrototype.getByteAt @parameters@
"position /*Number*/";
String.classPrototype.getByteAt @returns@
"/*Number*/";
String.classPrototype.getByteAt @description@
"Returns character (byte represented by number) at given position.";
String.classPrototype.getByteAt @example@
"console.write(\"abcde\".getByteAt(0));";
String.classPrototype.getByteAt @expectedOutput@
"97";

String.classPrototype.setByteAt @parameters@
"position /*Number*/, byte /*Number*/";
String.classPrototype.setByteAt @description@
"Sets new value of character (byte at given position).";
String.classPrototype.setByteAt @example@
"let x = \"abc\";
x.setByteAt(0, 98);
console.write(x);";
String.classPrototype.setByteAt @expectedOutput@
"bbc";

String.classPrototype.search @parameters@
"regex /*String*/";
String.classPrototype.search @returns@
"/*Array*/";
String.classPrototype.search @description@
"Returns array of object in form (position, length)
representing first substring that matches regex
and substrings that match subexpression of this regex.";
String.classPrototype.search @example@
"let arr = \"Roses are red.\".search(\"([A-Z]+)([a-z]+)\");
for (let i = 0; i < arr.length(); i++)
    console.write(arr[i].position, \" \", arr[i].length, \", \");";
String.classPrototype.search @expectedOutput@
"0 5, 0 1, 1 4, ";

String.classPrototype.searchAll @parameters@
"regex /*String*/";
String.classPrototype.searchAll @returns@
"/*Array*/";
String.classPrototype.searchAll @description@
"Returns array of object in form (position, length)
representing all substrings that matches regex.";
String.classPrototype.searchAll @example@
"let arr = \"Roses are red.\".searchAll(\"[a-z]+\");
for (let i = 0; i < arr.length(); i++)
    console.write(arr[i].position, \" \", arr[i].length, \", \");";
String.classPrototype.searchAll @expectedOutput@
"1 4, 6 3, 10 3, ";

String.classPrototype.split @parameters@
"delimeter /*String*/";
String.classPrototype.split @returns@
"/*Array*/";
String.classPrototype.split @description@
"Returns array of substrings delimited by 
the delimeter in the original string.";
String.classPrototype.split @example@
"let arr = \"abcd abcde abcdef bcdefg\".split(\"cd\");
for (let i = 0; i<arr.length(); i++)
    console.write(arr[i], \", \");";
String.classPrototype.split @expectedOutput@
"ab,  ab, e ab, ef b, efg, ";

String.classPrototype.indexOf @parameters@
"key /*String*/, [position /*Number*/]";
String.classPrototype.indexOf @returns@
"/*Number*/";
String.classPrototype.indexOf @description@
"Returns the index of the first occurrence of key 
(optionaly starting from given position) 
or -1 if the key is not found.";
String.classPrototype.indexOf @example@
"let str = \"Roses are red, Violets are blue, If you're reading this, I'm sorry for you.\";
let a = str.indexOf(\"are\");
let b = str.indexOf(\"are\", a + 1);
let c = str.indexOf(\"yellow\");
console.write(a, \" \", b, \" \", c);";
String.classPrototype.indexOf @expectedOutput@
"6 23 -1";

String.classPrototype.append @parameters@
"str /*String*/, [position = 0 /*Number*/, length = string.length() /*Number*/]";
String.classPrototype.append @description@
"Appends str to this string (or optionally 
substring starting from given position 
and of given length).";
String.classPrototype.append @example@
"let str = \"Roses are \";
let str2 = \"red, Violets are blue.\";
str.append(str2);
console.write(str);
str = \"Roses are \";
str.append(str2, 17, 5);
console.write(\" | \", str);";
String.classPrototype.append @expectedOutput@
"Roses are red, Violets are blue. | Roses are blue.";

Boolean @description@
"Represents boolean value.";
Boolean @example@
"console.write(true && false || false);";
Boolean @expectedOutput@
"false";

Number @description@
"Represents number represented as at least 4 bytes
integer or at least 8 bytes floating-point number,
implementation should choose an appropriate representation
dynamically.";
Number @example@
"console.write(1 + 2 * 3);";
Number @expectedOutput@
"7";

Number.classPrototype.toInteger @returns@
"/*Number*/";
Number.classPrototype.toInteger @description@
"Converts number to at least 4 bytes integer representation.";
Number.classPrototype.toInteger @example@
"console.write(3.14.toInteger());";
Number.classPrototype.toInteger @expectedOutput@
"3";

Number.classPrototype.toFloatingPoint @returns@
"/*Number*/";
Number.classPrototype.toFloatingPoint @description@
"Converts number to at least 4 bytes integer representation. 
Warning: after making a copy of this number it might convert 
to integer representation again.";
Number.classPrototype.toFloatingPoint @example@
"console.write(3.toFloatingPoint());";
Number.classPrototype.toFloatingPoint @expectedOutput@
"3.000000";

Function @description@
"Represents function.";
Function @example@
"function sum (a, b) {
    return a + b;    
};
console.write(sum(1, 3));";
Function @expectedOutput@
"4";

Function.classPrototype.call @parameters@
"caller, [...]";
Function.classPrototype.call @returns@
"return value of function /*Object*/";
Function.classPrototype.call @description@
"Calls function with the first argument as caller
and passes following arguments to this function.";
Function.classPrototype.call @example@
"let x = String.classPrototype.substring.call(\"abc\", 1, 1);
// equivalent of \"abc\".substring(1, 1)
console.write(x);";
Function.classPrototype.call @expectedOutput@
"b";

Class @description@
"Takes part in class creation.";
Class @example@
"class MyBaseClass {
    function constructor {
        console.write(\"baseConstructor \");
    },
    function method {
        console.write(\"baseMethod \");
    },
    function destructor {
        console.write(\"baseDestructor \");
    }
};
MyBaseClass();

console.write(\"| \");

class MyClass extends MyBaseClass {
    function constructor {
        this.super();
        console.write(\"constructor \");
    },
    function method {
        console.write(\"method \");
    },
    function destructor {
        console.write(\"destructor \");
        // TODO: auto base class destructor calling
        this.prototype.prototype.destructor.call(this);
    }
};
let obj <- MyClass();
obj.method();
";
Class @expectedOutput@
"baseConstructor baseDestructor | baseConstructor constructor method destructor baseDestructor ";

Time @description@
"Singleton object that has properties 
connected with time.";
Time @example@
"console.writeLine(Time.sinceEpoch.asFloatingPoint());
console.writeLine(Time.sinceEpoch.asInteger());";

Time.sinceEpoch @description@
"Provides methods returnig the time elapsed since 
UNIX epoch (January 1, 1970 00:00:00 UTC).";
Time.sinceEpoch @example@
"console.writeLine(Time.sinceEpoch.asFloatingPoint());
console.writeLine(Time.sinceEpoch.asInteger());";

Time.sinceEpoch.asFloatingPoint @returns@
"/*Number*/";
Time.sinceEpoch.asFloatingPoint @description@
"Returns the number of milliseconds elapsed since UNIX epoch 
(January 1, 1970 00:00:00 UTC) as floating point number.";
Time.sinceEpoch.asFloatingPoint @example@
"console.writeLine(Time.sinceEpoch.asFloatingPoint());";


Time.sinceEpoch.asInteger @returns@
"/*Number*/";
Time.sinceEpoch.asInteger @description@
"Returns the number of seconds elapsed since UNIX epoch 
(January 1, 1970 00:00:00 UTC) as integer.";
Time.sinceEpoch.asInteger @example@
"console.writeLine(Time.sinceEpoch.asInteger());";

File @description@
"File class provides file input and output operations.";
File @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File @expectedOutput@
"http 80";

File.classPrototype.write @parameters@
"/*any number of convertible to String parameters*/";
File.classPrototype.write @returns@
"/*File*/";
File.classPrototype.write @description@
"Output operation. 
Writes arguments to file.";
File.classPrototype.write @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File.classPrototype.write @expectedOutput@
"http 80";

File.classPrototype.writeAsync @parameters@
"/*any number of convertible to String parameters*/";
File.classPrototype.writeAsync @returns@
"/*Promise*/";
File.classPrototype.writeAsync @description@
"Output operation. 
Writes arguments to file.";
File.classPrototype.writeAsync @example@
"let file = File();
file.create(\"protocols.txt\");
await file.writeLineAsync(\"http\");
await file.writeAsync(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File.classPrototype.writeAsync @expectedOutput@
"http 80";

File.classPrototype.writeLine @parameters@
"/*any number of convertible to String parameters*/";
File.classPrototype.writeLine @returns@
"/*File*/";
File.classPrototype.writeLine @description@
"Output operation. 
Writes arguments appended with the new line 
character to file.";
File.classPrototype.writeLine @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File.classPrototype.writeLine @expectedOutput@
"http 80";

File.classPrototype.writeLineAsync @parameters@
"/*any number of convertible to String parameters*/";
File.classPrototype.writeLineAsync @returns@
"/*Promise*/";
File.classPrototype.writeLineAsync @description@
"Output operation. 
Writes arguments appended with the new line 
character to file.";
File.classPrototype.writeLineAsync @example@
"let file = File();
file.create(\"protocols.txt\");
await file.writeLineAsync(\"http\");
await file.writeAsync(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File.classPrototype.writeLineAsync @expectedOutput@
"http 80";

File.classPrototype.read @returns@
"/*String*/";
File.classPrototype.read @description@
"Input operation. 
Reads word terminated by whitespace from file.";
File.classPrototype.read @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File.classPrototype.read @expectedOutput@
"http 80";

File.classPrototype.readAsync @returns@
"/*Promise of String*/";
File.classPrototype.readAsync @description@
"Input operation. 
Reads word terminated by whitespace from file.";
File.classPrototype.readAsync @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = await file.readLineAsync();
let port = await file.readAsync();
file.close();

console.write(name, \" \", port);";
File.classPrototype.read @expectedOutput@
"http 80";

File.classPrototype.readLine @returns@
"/*String*/";
File.classPrototype.readLine @description@
"Input operation. 
Reads string terminated by new line character 
from file.";
File.classPrototype.readLine @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = file.readLine();
let port = file.read();
file.close();

console.write(name, \" \", port);";
File.classPrototype.readLine @expectedOutput@
"http 80";

File.classPrototype.readLineAsync @returns@
"/*Promise of String*/";
File.classPrototype.readLineAsync @description@
"Input operation. 
Reads string terminated by new line character 
from file.";
File.classPrototype.readLineAsync @example@
"let file = File();
file.create(\"protocols.txt\");
file.writeLine(\"http\").write(80);
file.setReadPosition(0);

let name = await file.readLineAsync();
let port = await file.readAsync();
file.close();

console.write(name, \" \", port);";
File.classPrototype.readLineAsync @expectedOutput@
"http 80";


File.classPrototype.open @parameters@
"path /*String*/";
File.classPrototype.open @returns@
"/*File*/";
File.classPrototype.open @description@
"Opens file specified by the path. If 
the file object was already associated 
with existing file close it first.";
File.classPrototype.open @example@
"let file = File();
file.create(\"protocols.txt\");
file.remove();
try {
    file.open(\"protocols.txt\");
} catch {
    console.write(\"error\");
}";
File.classPrototype.open @expectedOutput@
"error";


File.classPrototype.create @parameters@
"path /*String*/";
File.classPrototype.create @returns@
"/*File*/";
File.classPrototype.create @description@
"Creates (or open and remove contents) 
file in the specified path. If the 
file object was already associated 
with existing file close it first.";
File.classPrototype.create @example@
"let file = File();
file.create(\"protocols.txt\");
file.remove();
try {
    file.open(\"protocols.txt\");
} catch {
    console.write(\"error\");
}";
File.classPrototype.create @expectedOutput@
"error";

File.classPrototype.remove @returns@
"/*File*/";
File.classPrototype.remove @description@
"Deletes the recently associated file. 
If the file object was associated with 
file close it first.";
File.classPrototype.remove @example@
"let file = File();
file.create(\"protocols.txt\");
file.remove();
try {
    file.open(\"protocols.txt\");
} catch {
    console.write(\"error\");
}";
File.classPrototype.remove @expectedOutput@
"error";


File.classPrototype.readTo @parameters@
"/*String*/";
File.classPrototype.readTo @returns@
"/*String*/";
File.classPrototype.readTo @description@
"Input operation. 
Reads string terminated by given character
from file.";
File.classPrototype.readTo @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
file.setReadPosition(0);
console.write(file.readTo(\"c\"));";
File.classPrototype.readTo @expectedOutput@
"abba";

File.classPrototype.readToAsync @parameters@
"/*Promise of String*/";
File.classPrototype.readToAsync @returns@
"/*Promise*/";
File.classPrototype.readToAsync @description@
"Input operation. 
Reads string terminated by given character
from file.";
File.classPrototype.readToAsync @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
file.setReadPosition(0);
console.write(await file.readToAsync(\"c\"));";
File.classPrototype.readToAsync @expectedOutput@
"abba";

File.classPrototype.readBytes @parameters@
"/*Number*/";
File.classPrototype.readBytes @returns@
"/*String*/";
File.classPrototype.readBytes @description@
"Input operation. 
Reads string of given length (in bytes)
from file.";
File.classPrototype.readBytes @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
file.setReadPosition(0);
console.write(file.readBytes(4));";
File.classPrototype.readBytes @expectedOutput@
"abba";

File.classPrototype.readBytesAsync @parameters@
"/*Number*/";
File.classPrototype.readBytesAsync @returns@
"/*Promise of String*/";
File.classPrototype.readBytesAsync @description@
"Input operation. 
Reads string of given length (in bytes)
from file.";
File.classPrototype.readBytesAsync @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
file.setReadPosition(0);
console.write(await file.readBytesAsync(4));";
File.classPrototype.readBytesAsync @expectedOutput@
"abba";

File.classPrototype.close @returns@
"/*File*/";
File.classPrototype.close @description@
"Performs flush and closes the associated file.";
File.classPrototype.close @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
console.write(file.size());
file.close();";
File.classPrototype.close @expectedOutput@
"7";

File.classPrototype.flush @returns@
"/*File*/";
File.classPrototype.flush @description@
"Makes sure all output operations are
saved to the underlaying storage.";
File.classPrototype.flush @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
console.write(file.read());
file.flush();
// File contents are now saved o disk
file.close();";
File.classPrototype.flush @expectedOutput@
"abbacda";

File.classPrototype.size @returns@
"/*Number*/";
File.classPrototype.size @description@
"Returns the size of file in bytes.";
File.classPrototype.size @example@
"let file = File();
file.create(\"abc.txt\");
file.write(\"abbacda\");
console.write(file.size());
file.close();";
File.classPrototype.size @expectedOutput@
"7";

File.classPrototype.getReadPosition @returns@
"/*Number*/";
File.classPrototype.getReadPosition @description@
"Input operation. 
Returns read position of file
(counted from begining in bytes). 
All input operations set the write 
position to 0, and consistently all 
output operations set the read 
position to 0.";
File.classPrototype.getReadPosition @example@
"let file = File();
file.create(\"ab.txt\");
file.write(\"aaaaa\");
file.setWritePosition(2);
file.write(\"bb\");
file.setReadPosition(1);
console.write(file.readBytes(4), \" \");
console.write(file.getReadPosition(), \" \");
console.write(file.getWritePosition());";
File.classPrototype.getReadPosition @expectedOutput@
"abba 5 0";

File.classPrototype.getWritePosition @returns@
"/*Number*/";
File.classPrototype.getWritePosition @description@
"Output operation. 
Returns write position of file
(counted from begining in bytes). 
All input operations set the write 
position to 0, and consistently all 
output operations set the read 
position to 0.";
File.classPrototype.getWritePosition @example@
"let file = File();
file.create(\"ab.txt\");
file.write(\"aaaaa\");
file.setWritePosition(2);
file.write(\"bb\");
file.setReadPosition(1);
console.write(file.readBytes(4), \" \");
console.write(file.getReadPosition(), \" \");
console.write(file.getWritePosition());";
File.classPrototype.getWritePosition @expectedOutput@
"abba 5 0";

File.classPrototype.setReadPosition @parameters@
"/*Number*/";
File.classPrototype.setReadPosition @description@
"Input operation. 
Sets read position of file
(counted from begining in bytes). 
All input operations set the write 
position to 0, and consistently all 
output operations set the read 
position to 0.";
File.classPrototype.setReadPosition @example@
"let file = File();
file.create(\"ab.txt\");
file.write(\"aaaaa\");
file.setWritePosition(2);
file.write(\"bb\");
file.setReadPosition(1);
console.write(file.readBytes(4), \" \");
console.write(file.getReadPosition(), \" \");
console.write(file.getWritePosition());";
File.classPrototype.setReadPosition @expectedOutput@
"abba 5 0";

File.classPrototype.setWritePosition @parameters@
"/*Number*/";
File.classPrototype.setWritePosition @description@
"Output operation. 
Sets write position of file
(counted from begining in bytes). 
All input operations set the write 
position to 0, and consistently all 
output operations set the read 
position to 0.";
File.classPrototype.setWritePosition @example@
"let file = File();
file.create(\"ab.txt\");
file.write(\"aaaaa\");
file.setWritePosition(2);
file.write(\"bb\");
file.setReadPosition(1);
console.write(file.readBytes(4), \" \");
console.write(file.getReadPosition(), \" \");
console.write(file.getWritePosition());";
File.classPrototype.setWritePosition @expectedOutput@
"abba 5 0";

Promise @description@
"Represents an operation that that executes 
asynchronously and its resulting value or error that 
raised during its execution.";
Promise @example@
"Timeout(20).then(() => console.write(20, \" \"););
await Timeout(30);
console.write(30, \" \");";
Promise @expectedOutput@
"20 30 ";

Promise.classPrototype["await"] @returns@
"/*Object*/";
Promise.classPrototype["await"] @description@
"Suspends the current context of execution until 
asynchronous operation associated with promise 
completes. Returns value returned by that 
operation. `await` doesn't block, the control swaps 
to another task.";
Promise.classPrototype["await"] @example@
"let condition = false;
let promise = Promise(() => {
    while (!condition)
        Promise.tick();
    console.write(\"c is now true\");
});
Timeout(10).then(() => condition = true;);

// We can't use promise.await()
// directly because there is await
// operator. However it is possible
// to use promise[\"await\"]()

await promise;";
Promise.classPrototype["await"] @expectedOutput@
"c is now true";

Promise.classPrototype.then @parameters@
"/*Function*/";
Promise.classPrototype.then @returns@
"/*Promise*/";
Promise.classPrototype.then @description@
"When asynchronous operation associated with 
this promise completes its resulting value is
passed to callback supplied with then method.
Represents value returned by that callback.";
Promise.classPrototype.then @example@
"let promise = Timeout(10)
    .then(() => 7;)
    .then((x) => x + 3;)
    .then((x) => x / 2;)
    .then((x) => console.write(x););
await promise;";
Promise.classPrototype.then @expectedOutput@
"5";

Promise.tick @description@
"Suspends the current context of execution
and pass control to another context.";
Promise.tick @example@
"let syn = false;
Timeout(10).then(() => {
    console.write(1);
    syn = true;
});
let b = Timeout(10).then(() => {
    while(!syn)
        Promise.tick();
    console.write(2);
});
await b;";
Promise.tick @expectedOutput@
"12";

//ConditionalPromise @parameters@
//"callback /*Function*/, condition /*Function*/"
//ConditionalPromise @description@
//"Represents an operation that that is asynchronously 
//sampling the value of condition and when it's true 
//executes callback.";
//ConditionalPromise @example@
//"let condition = false;
//let promise = ConditionalPromise(
//    () => console.write(\"c is now true\");, 
//    () => condition;);
//Timeout(10).then(() => condition = true;);
//await promise;";
//ConditionalPromise @expectedOutput@
//"c is now true";

Timeout @parameters@
"milliseconds /*Number*/";
Timeout @description@
"Asynchronously waits for the given amount 
of time (in milliseconds). Completes after 
finishing waiting.";
Timeout @example@
"// Wait for 10 ms
Timeout(1).then(() => console.write(1););
console.write(0);
await Timeout(23);
console.write(23);";
Timeout @expectedOutput@
"0123";

let tcpExample = "let tcpServer = TcpServer();
let port = 3000;
let portNotSet = true;

while (portNotSet) {
    try {
        await tcpServer.bind(port++);
        portNotSet = false;
    } catch {
        // https://wiki.c2.com/?PokemonExceptionHandling
    }
}

tcpServer.listen().then((tcpClientB) => {
    console.write(await tcpClientB.receive());
    await tcpClientB.close();
});

let tcpClientA = TcpClient();
await tcpClientA.connect(\"127.0.0.1\", port);
await tcpClientA.send(\"abcd\");
await tcpClientA.close();";

let tcpExampleOutput = "abcd";

TcpServer @description@
"TCP server listens for TCP connections.";
TcpServer @example@
tcpExample;
TcpServer @expectedOutput@
tcpExampleOutput;

TcpServer.classPrototype.bind @parameters@
"port /*Number*/";
TcpServer.classPrototype.bind @description@
"Assigns socket to port and start listening for 
client connections.";
TcpServer.classPrototype.bind @example@
tcpExample;
TcpServer.classPrototype.bind @expectedOutput@
tcpExampleOutput;

TcpServer.classPrototype.listen @returns@
"/*Promise of TcpClient*/";
TcpServer.classPrototype.listen @description@
"Accepts connection request asynchronously, 
returns TCP client used to send and receive data.";
TcpServer.classPrototype.listen @example@
tcpExample;
TcpServer.classPrototype.listen @expectedOutput@
tcpExampleOutput;

TcpServer.classPrototype.close @description@
"Closes the socket.";
TcpServer.classPrototype.close @example@
tcpExample;
TcpServer.classPrototype.close @expectedOutput@
tcpExampleOutput;


TcpClient @description@
"TCP client provides TCP socket 
input and output operations.";
TcpClient @example@
tcpExample;
TcpClient @expectedOutput@
tcpExampleOutput;

TcpClient.classPrototype.send @parameters@
"message /*String*/";
TcpClient.classPrototype.send @returns@
"/*Promise of TcpClient*/";
TcpClient.classPrototype.send @description@
"Sends message to another socket asynchronously.";
TcpClient.classPrototype.send @example@
tcpExample;
TcpClient.classPrototype.send @expectedOutput@
tcpExampleOutput;

TcpClient.classPrototype.receive @returns@
"/*Promise of String*/";
TcpClient.classPrototype.receive @description@
"Receives message from another socket asynchronously.";
TcpClient.classPrototype.receive @example@
tcpExample;
TcpClient.classPrototype.receive @expectedOutput@
tcpExampleOutput;

TcpClient.classPrototype.close @description@
"Closes the socket.";
TcpClient.classPrototype.close @example@
tcpExample;
TcpClient.classPrototype.close @expectedOutput@
tcpExampleOutput;


/* TODO: 
- ChildProcess
- Accessible
- TcpClient
- TcpServer
*/

/*
T @parameters@
"";
T @returns@
"";
T @description@
"";
T @example@
"";
T @expectedOutput@
"";
*/