class HttpServer {
    constructor: function {
        this.tcpServer <- TcpServer();
        this.open = true;
        this.i = 0;
    },
    listen: function (port)
    {
        await this.tcpServer.bind(port);
        let i <- this.i;
        while (this.open) {
            await ConditionalPromise(() => {}, () => i >= 2; );
            i++;
            this.tcpServer.listen().then((c) => {
                i--;
                //try {
                    let request = await c.receive();
                    //console.writeLine(request);
                    let requestObject;
                    let a <- request.indexOf(" ");
                    requestObject.method <- request.substring(0, a);
                    //console.log("<",requestObject.method,">");
                    let b <- request.indexOf(" ", a+1);
                    requestObject.uri <- request.substring(a+1, b-a-1);
                    //console.log("<",requestObject.uri,">");

                    a <- request.indexOf("\n", b);
                    b <- request.indexOf(":", a);

                    let temp;

                    while (b != -1)
                    {
                        //console.warn(b);
                        temp <- request.substring(a+1, b-a-1);
                        //console.log("<",temp,">");

                        a <- request.indexOf("\n", b);

                        temp <- request.substring(b+2, a-b-2);
                        //console.log("<",temp,">");
                        //console.warn(a);

                        b <- request.indexOf(":", a);

                    }

                    //request.searchAll("[^\\:\\n]*:[^\\n]*").forEach((x) => {
                    //    let entry <- request.substring(x.position, x.length);
                    //    let pos <- entry.search(":")[0].position;
                    //    let key <- entry.substring(0, pos);
                    //    requestObject[key] = entry.substring(pos + 2, entry.length() - pos - 2);
                    //});
                    //let methodAndURI <- request.search("([A-Z]*)\\s(\\S*)");
                    //console.warn(methodAndURI.length());
                    //requestObject.method <- request.substring(methodAndURI[1].position, methodAndURI[1].length);
                    //requestObject.uri <- request.substring(methodAndURI[2].position, methodAndURI[2].length);
                    //console.writeLine(requestObject.uri);
                    await c.send("HTTP/1.0 200 OK\r\n\r\nHello");
                    await c.close();
                /*} catch {
                    console.error(exception);
                }*/
            });
        }
    },
    destructor: function {
        this.open = false;
        await this.tcpServer.close();
    }
};

let h <- HttpServer();
await h.listen(3000);
await Promise(() => { console.error("e"); });
