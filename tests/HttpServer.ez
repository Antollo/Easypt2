function parseHttpMessage(msg) {
    let obj;
    let headersArray;
    let idx <- msg.indexOf("\r\n\r\n");
    if (idx != -1)
    {
        headersArray <- msg.substring(0, idx).split("\r\n");
        obj.body <- msg.substring(idx + 4, msg.length() - idx - 4);
    }
    else
        headersArray <- msg.split("\r\n");

    let msgLineArray <- headersArray[0].split(" ");
    if (msgLineArray[0].indexOf("HTTP") == 0) {
        obj.httpVersion <- msgLineArray[0];
        obj.statusCode <- msgLineArray[1];
        obj.reasonPhrase <- msgLineArray[2];
    } else {
        obj.method <- msgLineArray[0];
        obj.requestUri <- msgLineArray[1];
        obj.httpVersion <- msgLineArray[2];
    }
    let element;
    for (let j in 1..headersArray.length()) {
        element <- headersArray[j].split(": ");
        obj.headers[element[0]] = element[1];
    }
    return obj;
};

class HttpServer {
    constructor: function {
        this.tcpServer <- TcpServer();
        this.open = true;
    },
    listen: function (port)
    {
        await this.tcpServer.bind(port);
        while (this.open) {
            let client = await this.tcpServer.listen();
            try {
                let msg <- await client.receive();
                if (msg.length() == 0)
                    return -1;
                let obj <- parseHttpMessage(msg);
                if (obj.body)
                    while (obj.body.length() < obj.headers["Content-Length"])
                        obj.body.append(await client.receive());

                await client.send("HTTP/1.0 200 OK\r\n\r\nHello");
                await client.close();
            } catch {
                console.error(exception);
            }
        }
    },
    destructor: function {
        this.open = false;
        await this.tcpServer.close();
    }
};

function request(method, requestUri, headers)
{
    if (args.length() < 6)
        let httpVersion <- "HTTP/1.1";
    if (args.length() < 5)
        let port <- 443;
    if (args.length() < 4)
        let body <- "";

    let r = method;
    r.append(" ").append(requestUri).append(" ").append(httpVersion).append("\r\n");
    headers.getOwnPropertyNames().forEach((name) => {
        if (name != "prototype")
            r.append(name).append(": ").append(headers[name]).append("\r\n");
    });
    
    r.append("\r\n").append(body);

    let server = SslClient();
    await server.connect(headers["Host"], port);
    await server.send(r);
    let obj <- parseHttpMessage(await server.receive());
    if (obj.hasOwnProperty("body"))
        while (obj.body.length() < obj.headers["Content-Length"])
            obj.body.append(await server.receive());
    return obj;
};

let r = request("GET", "/", { Host: "example.com" });
console.log(r);


let h <- HttpServer();
h.listen(1717);