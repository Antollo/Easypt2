let text = "xd";
text = text = "b";
console.log(text, "działa");
console.error(2137.5);
let f = function (a, b) {
    console.log("funkcja", a, b);
};
f(7,8);
parse("console.log(1000);")();
{
    let obj = Number();
    //obj.prototype.destructor = f;
}
console.log("f");

let arr = ["a", 7, 4.3, false];
for (let i = 0; i<arr.length(); i++)
{
    console.debug(arr[i]);
}

function nwd (x, y) {
    let a = x;
    let b = y;
    while (a != b) {
        if (a < b)
            b <- b - a;
        else
            a <- a - b;
    }
    return a;
};

let arr = Array();
let i = 0;
while(i<1000) {
    let x;
    arr.insert(0, x);
    i++;
}
console.warn("Zażółć gęślą jaźń.\n");
let a = 144;
let b = 20480000;
let time = Time.sinceEpoch.asFloatingPoint();
let x = nwd(144, 20480000);
// 1170 - old time
// 580 - new time
console.log(Time.sinceEpoch.asFloatingPoint() - time);

let u = {a:7, b:8};
console.log(u.a);

class Printer {
    constructor: function {
        console.writeLine("Printer constructor");
    },
    print: function {
        console.writeLine("Printer");
    }
};

class Myclass extends Printer {
    constructor: function {
        //getStack().forEach(console.log);
        this.super();
        this.sth = args[0];
        console.writeLine("constructor");
        this.print();
    },
    writeSth: function { console.writeLine(this.sth); },
    write: function { console.writeLine("write"); },
    destructor: function { console.writeLine("destructor" + this.sth); }
};

{
    let m <- Myclass(12);
    m.writeSth();
    m["sth"] = "_g";
    console.writeLine(m["sth"]);
    console.writeLine(m.sth);
    //console.writeLine(m.getId());
    m.writeSth();
}

let file = File();
file.create("protocols.txt");
file.remove();
try {
    file.open("protocols.txt");
} catch {
    console.write("error");
}

